plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
    id 'com.android.library'
}
repositories {
    google()
    jcenter()
    mavenCentral()
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
        }
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')
        // This preset is for iPhone emulator
        // Switch here to presets.iosArm64 (or iosArm32) to build library for iPhone device
        fromPreset(presets.iosX64, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation deps.kotlin.stdlib.common
                api deps.kotlin.coroutines.common
                implementation deps.kotlin.serialization.common

                implementation deps.ktor.common
                implementation deps.ktor.json
            }
        }
        commonTest {
            dependencies {
                implementation deps.kotlin.test.common
                implementation deps.kotlin.test.annotations
            }
        }
        androidMain {
            dependencies {
                api deps.kotlin.stdlib.jdk
                api deps.kotlin.coroutines.jdk
                api deps.kotlin.coroutines.android
                implementation deps.kotlin.serialization.jdk

                implementation deps.ktor.android
                implementation deps.ktor.jsonJvm
            }
        }
        androidTest {
            dependencies {
                implementation deps.kotlin.test.jdk
                implementation deps.kotlin.test.junit
            }
        }
        iosMain {
            dependencies {
                implementation deps.kotlin.coroutines.native
                implementation deps.kotlin.serialization.native
                implementation deps.ktor.ios
                implementation deps.ktor.jsonIos
            }
        }
        iosTest {
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def target = project.findProperty("kotlin.target") ?: "ios"
    dependsOn "link${buildType.toLowerCase().capitalize()}Framework${target.capitalize()}"

    doLast {
        def srcFile = kotlin.targets."$target".compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'data.framework/**'
            include 'data.framework.dSYM'
        }
    }
}
